1. Create an assert statement that throws an AssertionError if the variable spam is a negative integer.
Ans :-->
assert spam >0, 'The variable spam is a negative integer.'

2. Write an assert statement that triggers an AssertionError if the variables eggs and bacon contain strings that are the same as each other, even if their cases are different (that is, 'hello' and 'hello' are considered the same, and 'goodbye' and 'GOODbye' are also considered the same).
Ans:-->
assert eggs.lower() != bacon.lower(), 'The eggs and bacon variables are same.'
OR
assert eggs.upper() != bacon.upper(), 'The eggs and bacon variables are same.'

3. Create an assert statement that throws an AssertionError every time.
Ans :-->
assert False, 'AssertionError.'
OR
assert 1 != 1 , 'AssertionError.'

4. What are the two lines that must be present in your software in order to call logging.debug()?
And:-->
import logging logging.basicConfig(filename='log.txt', level=logging.DEBUG, format=' %(asctime)s - %(levelname)s - %(message)s')

5. What are the two lines that your program must have in order to have logging.debug() send a logging message to a file named programLog.txt?
Ans:-->
import logging logging.basicConfig(filename='programLog.txt', level=logging.DEBUG, format=' %(asctime)s - %(levelname)s - %(message)s')

6. What are the five levels of logging?
ANs:-->
DEBUG
INFO
WARNING
ERROR
CRITICAL

7. What line of code would you add to your software to disable all logging messages?
Ans:-->
logging.disable(logging.DEBUG)

8.Why is using logging messages better than using print() to display the same message?
Ans:-->
logging messages can be disabled without removing the logging function calls. 
selective logging message can be disabled or enabled eg DEBUG, Error, critical. 
Logging messages provides a timestamp.

9. What are the differences between the Step Over, Step In, and Step Out buttons in the debugger?
Ans:-->
The Step button will move the debugger into a function call. 
The Over button will quickly execute the function call without stepping into it. 
The Out button will quickly execute the rest of the code until it steps out of the function it currently is in.

10.After you click Continue, when will the debugger stop ?
Ans:-->
continue will continue the execution until the next breakpoint is reached or the program exits

11. What is the concept of a breakpoint?
Ans:-->
breakpoint is a setting on a line of code that causes the debugger to pause when the program execution reaches the line

